# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!
use_modular_headers!

linkage = ENV['USE_FRAMEWORKS']
if linkage
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym # 'static' 또는 'dynamic'
end

require_relative '../node_modules/react-native-permissions/scripts/setup'
setup_permissions([
  'Notifications',
])

config = use_native_modules!

target 'MoodlyFrontend' do
  pod 'FirebaseAuth'
  pod 'FirebaseFirestore'
  pod 'GTMSessionFetcher/Core', '~> 3.4'

  use_react_native!(
    :path => config[:reactNativePath],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
end

# ✅ post_install은 루트 스코프에 두고, (필요시) non-modular 허용 완화
# Podfile에 추가할 스크립트
post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if target.name == "React-Core-AccessibilityResources"
        config.build_settings['WARNING_CFLAGS'] = "-w"
      end
    end
  end

  # glog의 C++ 호환성 문제를 해결하기 위한 패치 (Xcode 16 대응)
  glog_pod_path = Pod::Config.instance.sandbox.pod_dir('glog')
  if glog_pod_path.exist?
    logging_h_path = glog_pod_path + 'src/glog/logging.h'
    if logging_h_path.exist?
      text = File.read(logging_h_path)
      # 아래 코드가 이미 있다면 중복 추가하지 않도록 체크
      unless text.include?('#define DECLARE_STREAM_OPERATOR_FOR_STL_STRINGS 0')
        File.write(logging_h_path, "#define DECLARE_STREAM_OPERATOR_FOR_STL_STRINGS 0\n" + text)
        puts "Patched glog/logging.h for Xcode 16 compatibility."
      end
    end
  end
end