name: Moodly HotUpdater CI/CD

on:
  push:
    branches: [main]

jobs:
  deploy-ota:
    runs-on: ubuntu-latest

    # Supabase 접속 정보
    env:
      HOT_UPDATER_SUPABASE_URL: ${{ secrets.HOT_UPDATER_SUPABASE_URL }}
      HOT_UPDATER_SUPABASE_ANON_KEY: ${{ secrets.HOT_UPDATER_SUPABASE_ANON_KEY }}
      HOT_UPDATER_SUPABASE_BUCKET_NAME: ${{ secrets.HOT_UPDATER_SUPABASE_BUCKET_NAME }}

    # fingerprint.json 커밋을 푸시하기 위해 contents:write 권한 필요
    permissions:
      contents: write

    steps:
      # 1) 리포 체크아웃 (커밋 기록까지 필요하므로 fetch-depth 0)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Node & Yarn 설정
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      # 3) 의존성 설치
      - run: yarn install --frozen-lockfile

      # 4) 최신 커밋 메시지 추출
      - name: 커밋 메시지 추출
        id: commit
        run: echo "MSG=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      # 5) fingerprint.json 과 소스 기반 해시 비교
      - name: Fingerprint 비교
        id: fp
        run: |
          if yarn hot-updater fingerprint --compare-from-file; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true"  >> $GITHUB_OUTPUT
          fi

      # 6) 네이티브 수정([native] 태그) + 지문 변경 시 새 지문 생성
      - name: 새 Fingerprint 생성
        if: steps.fp.outputs.changed == 'true' && contains(steps.commit.outputs.MSG, '[native]')
        run: yarn hot-updater fingerprint create --write-to-file

      # 7) fingerprint.json 을 자동 커밋·푸시
      - name: Fingerprint 파일 커밋
        if: steps.fp.outputs.changed == 'true' && contains(steps.commit.outputs.MSG, '[native]')
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add fingerprint.json
          git commit -m "chore: update fingerprint [ci skip]"
          git push

      # 8) [hot-update] 태그 없으면 배포 스킵
      - name: HotUpdate 태그 검사
        if: (!contains(steps.commit.outputs.MSG, '[hot-update]'))
        run: echo "Hot-update 태그 없음, 작업 종료." && exit 0

      # 9) [force] 태그 → -f 플래그 설정
      - name: 강제 업데이트 플래그 결정
        id: force
        run: |
          if [[ "${{ steps.commit.outputs.MSG }}" == *"[force]"* ]]; then
            echo "FLAG=-f" >> $GITHUB_OUTPUT
          else
            echo "FLAG="  >> $GITHUB_OUTPUT
          fi

      # 10) Android 번들 배포 (Fingerprint 전략)
      - name: Android 번들 배포
        run: yarn hot-updater deploy -p android ${{ steps.force.outputs.FLAG }}

      # 11) iOS 번들 배포 (Fingerprint 전략, 채널 production)
      - name: iOS 번들 배포
        run: yarn hot-updater deploy -p ios -c production ${{ steps.force.outputs.FLAG }}
