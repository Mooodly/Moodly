name: Moodly HotUpdater CI/CD

on:
  push:
    branches: [main]

jobs:
  deploy-ota:
    if: contains(github.event.head_commit.message, '[hot-update]')
    runs-on: ubuntu-latest

    env:
      HOT_UPDATER_SUPABASE_URL: ${{ secrets.HOT_UPDATER_SUPABASE_URL }}
      HOT_UPDATER_SUPABASE_ANON_KEY: ${{ secrets.HOT_UPDATER_SUPABASE_ANON_KEY }}
      HOT_UPDATER_SUPABASE_BUCKET_NAME: ${{ secrets.HOT_UPDATER_SUPABASE_BUCKET_NAME }}

    steps:
      # 1) 커밋 메세지 가져오기
      - name: 최신 커밋 메시지 가져오기
        id: get_msg
        run: |
          echo "msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      # 3) 원격 레포지토리 데이터 내려받기
      - uses: actions/checkout@v4

      # 4) Node.js 환경 설정 + yarn 캐시
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      # 5) Yarn 의존성 설치
      - run: yarn install --frozen-lockfile

      # 6) fingerprint 비교
      - name: Check fingerprint
        id: fp
        run: |
          set +e
          yarn hot-updater fingerprint > fp.log
          echo "EXIT=$?" >> $GITHUB_OUTPUT
          exit 0

      # 7) fingerprint가 다를 경우, 신규 fingerprint 업로드
      - name: Create new fingerprint
        if: steps.fp.outputs.EXIT != '0'
        run: yarn hot-updater fingerprint create

      # 8) [hot-update], [force] 명령어 설정
      - name: Deploy bundles
        run: |
          COMMIT_MSG="${{ steps.get_msg.outputs.msg }}"
          echo "커밋 메시지: $COMMIT_MSG"

          # 1) [hot-update] 태그가 없으면 스킵
          if [[ "$COMMIT_MSG" != *"[hot-update]"* ]]; then
            echo "Hot update 스킵"
            exit 0
          fi

          # 2) [force] 태그가 있으면 -f 옵션 추가
          if [[ "$COMMIT_MSG" == *"[force]"* ]]; then
            echo "강제 업데이트(-f) 모드"
            FLAG="-f"
          else
            echo "일반 업데이트 모드"
            FLAG=""
          fi

          # 3) 실제 배포
          yarn hot-updater deploy -p android $FLAG
          yarn hot-updater deploy -p ios -t '1.0.x' $FLAG
